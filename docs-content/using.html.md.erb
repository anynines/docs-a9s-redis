---
title: Using a9s Redis for PCF
owner: Partners
---
<style>
    .note.warning {
        background-color: #fdd;
        border-color: #fbb
    }
    .note.warning:before {
        color: #f99;
     }
</style>

This topic describes how to use a9s Redis for Pivotal Cloud Foundry (PCF) after it has been successfully [installed](./installing.html).

##<a id='using'></a>Use a9s Redis for PCF with an App

To use a9s Redis for PCF with an app, create a service instance and bind the service instance to your app. For more information on managing service instances, see <a href="http://docs.pivotal.io/pivotalcf/devguide/services/managing-services.html" target="_blank">Managing Service Instances with the cf CLI</a>.

###<a id='view-service'></a> View the Service

After the tile is installed, run `cf marketplace` to see `a9s-redis32` and its service plans:

<pre class="terminal">
$ cf marketplace
Getting services from marketplace in org test / space test as admin...
OK
service      plans                                           description
a9s-redis32  redis-single-non-persistent-small, redis-single-non-persistent-big            This is the anynines Redis 32 service.
</pre>

For more information on available service plans, see [Configure Service Plans](./installing.html#configure-service-instance).

###<a id='create-instance'></a> Create a Service Instance

To provision a Redis database, run `cf create-service SERVICE-NAME PLAN-NAME INSTANCE-NAME` where `INSTANCE-NAME` is any name you want to give the instance you create.

<pre class="terminal">
$ cf create-service a9s-redis32 redis-single-non-persistent-small my-redis-service
</pre>

<p class="note"><strong>Note</strong>: This may take several minutes.</p>

Run the `cf services` command to list all your service instances. To view the status of a specific service instance, run `cf service INSTANCE-NAME`.

###<a id='bind-instance'></a> Bind an App to a Service Instance

After you create your database, run `cf bind-service APP-NAME INSTANCE-NAME` to bind the service to your app:

<pre class="terminal">
$ cf bind-service a9s-redis-app my-redis-service
</pre>

###<a id='restage'></a> Restage or Restart Your App

To enable your app to access the service instance, run `cf restage APP-NAME` or `cf restart APP-NAME`.

##<a id='credentials'></a> Obtain Credentials for Accessing Your Service Instance

After you bind a service instance to an app, PCF stores the credentials of your Redis database in the environment variables of the app. Run `cf env APP-NAME` to display the environment variables.

You can find the credentials in the <a href="http://docs.pivotal.io/pivotalcf/devguide/deploy-apps/environment-variable.html#VCAP-SERVICES" target="_blank">VCAP_SERVICES</a> key.

<pre class="terminal">
$ cf env a9s-redis-app
Getting env variables for app a9s-redis-app in org test / space test as admin...
OK

System-Provided:
{
 "VCAP_SERVICES": {
  "a9s-redis": [
   {
    "credentials": {
     "host": "EXAMPLE-HOST",
     "password": "EXAMPLE-PWD",
     "port": 6379
    },
    "label": "a9s-redis",
    "name": "my-redis-service",
    "plan": "redis-single-non-persistent-small",
   }
  ]
 }
}
...
</pre>

You can use the host and password values to connect to your database with a Redis client.

##<a id='deleting'></a> Delete a Service Instance

<p class="note warning"><strong>Warning:</strong> This operation cannot be undone, and the data is lost when the service instance is deleted. If you want to keep your data, you must back up your database before deleting the service instance.</p>

Follow the steps below to unbind the service instance from all apps and then delete it.

###<a id='list-instances'></a> List Available Services

Run `cf services` to list available service instances and get the name of the service instance you want to delete.

<pre class="terminal">
$ cf services

Getting services in org test / space test as admin...
OK

name                 service       plan                                  bound apps        last operation
my-redis-service     a9s-redis     redis-single-non-persistent-small     a9s-redis-app     create succeeded
</pre>

This example shows that `my-redis-service` is bound to the `a9s-redis-app` app.

###<a id='unbind-instance'></a>Unbind a Service Instance

Run `cf unbind-service APP-NAME INSTANCE-NAME` to unbind the service from your app:

<pre class="terminal">
$ cf unbind-service a9s-redis-app my-redis-service
</pre>

###<a id='delete-instance'></a> Delete a Service Instance

Run `cf delete-service INSTANCE-NAME` to delete the service instance:

<pre class="terminal">
$ cf delete-service my-redis-service
</pre>

<p class="note"><strong>Note</strong>: This may take several minutes.</p>

Deleting a service deprovisions the corresponding infrastructure resources. Run the `cf services` command to view the deletion status.

##<a id='upgrade-service-plan'></a> Change Service Plan

Run `cf update-service INSTANCE-NAME PLAN-NAME` to modify your service instance to use a different service plan. You may want to use a larger service plan that provides more CPU, RAM, and storage. For more information, see <a href="http://docs.pivotal.io/pivotalcf/devguide/services/managing-services.html#update_service" target="_blank">Update a Service Instance</a>.

<pre class="terminal">
$ cf update-service my-redis-service -p a-bigger-plan
</pre>

You may choose to upgrade your service plan from `redis-single-non-persistent-small` to `redis-single-non-persistent-big`.

##<a id='add-graphite-endpoint'></a>Add a Graphite Endpoint

If you want to monitor your service instance with [Graphite](https://graphiteapp.org/), you can specify an endpoint to send data to with the `cf update-service` command. This command expects the <a href="http://docs.pivotal.io/pivotalcf/devguide/services/managing-services.html#arbitrary-params-update" target="_blank">-c flag</a> and a JSON string containing the `graphite` and `metrics_prefix` keys.

<pre class="terminal">
$ cf update-service my-redis-service -c '{ "graphite": ["yourspace.your-graphite-endpoint.com:12345"], "metrics_prefix": "your-api-key.my-redis" }'
</pre>

##<a id='add-syslog-endpoint'></a>Add a Syslog Endpoint

You can stream your syslog to a third-party service using the `cf update-service` command and the <a href="http://docs.pivotal.io/pivotalcf/devguide/services/managing-services.html#arbitrary-params-update" target="_blank">-c flag</a>. In this case, the command expects a JSON string containing the `syslog` key.

<pre class="terminal">
$ cf update-service my-redis-service -c '{ "syslog": ["logs4.your-syslog-endpoint.com:54321"] }'
</pre>
